make sure to resolve "declared but never used" typescript/variable-name errors

whenever there is an error, Reflect on 5-7 different possible sources of the problem, distill those down to 1-2 most likely sources, and then add logs to validate your assumptions before we move onto implementing the actual code fix

just use vanilla css, no fancy libraries like tailwind

Ensure TypeScript types are complete

# TypeScript Type Checking Rules

# Check for missing properties on types
rule TypeScriptPropertyCheck {
  when {
    matches_any {
      typescript_error("Property '${property}' does not exist on type")
    }
  }
  suggest {
    "Add the '${property}' property to the corresponding interface/type definition in src/types/index.ts"
  }
}

# Check for type mismatches
rule TypeScriptTypeMismatch {
  when {
    matches_any {
      typescript_error("Type '${type1}' is not assignable to type '${type2}'")
    }
  }
  suggest {
    "Ensure the types match or add type assertions where necessary. Consider updating the type definitions in src/types/index.ts"
  }
}

# Check for undefined variables
rule TypeScriptUndefined {
  when {
    matches_any {
      typescript_error("Cannot find name")
    }
  }
  suggest {
    "Import the required type/variable or define it in the current scope"
  }
}

# Check for optional properties
rule TypeScriptOptionalCheck {
  when {
    matches_any {
      typescript_error("Object is possibly 'undefined'")
    }
  }
  suggest {
    "Add optional chaining (?.) or provide a default value using nullish coalescing (??)"
  }
}

# Add rule for URL parameter consistency
rule URLParameterCheck {
  when {
    matches_any {
      typescript_error("Property '${param}' does not exist on type '{ ${type} }'")
      contains("useParams")
    }
  }
  suggest {
    "Check that the URL parameter name in the route path matches the parameter name in useParams. Current routes are defined in App.tsx"
  }
}

# Check for proper data mapping in lists
rule ReactListMapping {
  when {
    matches_any {
      contains("map(") 
      contains("key=")
    }
  }
  suggest {
    "Ensure proper key prop is used and all required props are passed to child components. Check the component's interface for required props."
  }
}

# Add rule for consistent property naming
rule PropertyNamingCheck {
  when {
    matches_any {
      contains("code_name") 
      contains("created_at")
    }
  }
  suggest {
    "Ensure property names are consistent across interfaces. Common properties should be defined in base interfaces"
  }
}

# Add rule for date handling
rule DatePropertyCheck {
  when {
    matches_any {
      contains("created_at")
      contains("updated_at")
      contains("Date")
    }
  }
  suggest {
    "Ensure date properties are properly typed as string or Date and are handled consistently"
  }
}

# Add rule for array type checking
rule ArrayTypeCheck {
  when {
    matches_any {
      contains(".map(") 
      contains(".filter(")
      contains(".reduce(")
    }
  }
  suggest {
    "Ensure array methods have proper type annotations for their callback parameters"
  }
}

# Add rule for interface extension checks
rule InterfaceExtensionCheck {
  when {
    matches_any {
      contains("extends")
      contains("implements")
    }
  }
  suggest {
    "Verify that extended interfaces include all required properties and maintain type consistency"
  }
}
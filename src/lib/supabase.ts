import { createClient } from '@supabase/supabase-js';

// Environment variables for Supabase connection
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// Create Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Bet types with display names
export type BetType = 'yesno' | 'custom';

export const BET_TYPE_NAMES: Record<BetType, string> = {
  yesno: 'Yes or No',
  custom: 'Multiple Choice'
};

// Database interfaces
export interface Bet {
  id: string;
  created_at: string;
  code_name: string;
  creator_name: string;
  bettype: BetType;
  question: string;
  description?: string;
  customoption1?: string;
  customoption2?: string;
}

export interface BetParticipant {
  id: string;
  created_at: string;
  bet_id: string;
  name: string;
  prediction: string;
}

// Error handling helper
const handleError = (error: unknown) => {
  console.error('Database operation failed:', error);
  return {
    data: null,
    error: error instanceof Error ? error : new Error('An unexpected error occurred')
  };
};

/**
 * Fetches all bets, sorted by creation date
 */
export const fetchAllBets = async () => {
  try {
    const { data, error } = await supabase
      .from('bets')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    return handleError(error);
  }
};

/**
 * Fetches a single bet by its code_name
 */
export const fetchBetByCodeName = async (codeName: string) => {
  try {
    const { data, error } = await supabase
      .from('bets')
      .select('*')
      .eq('code_name', codeName)
      .single();
    
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    return handleError(error);
  }
};

/**
 * Fetches all participants for a specific bet
 */
export const fetchBetParticipants = async (betId: string) => {
  try {
    const { data, error } = await supabase
      .from('bet_participants')
      .select('*')
      .eq('bet_id', betId)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    return handleError(error);
  }
};

/**
 * Creates a new bet
 * The code_name will be automatically generated by the database trigger
 */
export const createBet = async (betData: Omit<Bet, 'id' | 'created_at' | 'code_name'>) => {
  try {
    const { data, error } = await supabase
      .from('bets')
      .insert(betData)
      .select()
      .single();
    
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    return handleError(error);
  }
};

/**
 * Adds a new participant prediction to a bet
 */
export const addBetParticipant = async (participantData: Omit<BetParticipant, 'id' | 'created_at'>) => {
  try {
    const { data, error } = await supabase
      .from('bet_participants')
      .insert(participantData)
      .select()
      .single();
    
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    return handleError(error);
  }
}; 